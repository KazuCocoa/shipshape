// Code generated by protoc-gen-go.
// source: shipshape/proto/source_context.proto
// DO NOT EDIT!

/*
Package source_context_proto_go_src is a generated protocol buffer package.

It is generated from these files:
	shipshape/proto/source_context.proto

It has these top-level messages:
	SourceContext
	ProjectRepoId
	RepoId
	CloudRepoSourceContext
	CloudWorkspaceId
	CloudWorkspaceSourceContext
	GerritSourceContext
*/
package source_context_proto_go_src

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// A SourceContext is a reference to a tree of files. A SourceContext together
// with a path point to a unique revision of a single file or directory.
// A SourceContext can refer to any one of the types of repositories below.
type SourceContext struct {
	// A SourceContext referring to a revision in a cloud repo.
	CloudRepo *CloudRepoSourceContext `protobuf:"bytes,1,opt,name=cloud_repo" json:"cloud_repo,omitempty"`
	// A SourceContext referring to a snapshot in a cloud workspace.
	CloudWorkspace *CloudWorkspaceSourceContext `protobuf:"bytes,2,opt,name=cloud_workspace" json:"cloud_workspace,omitempty"`
	// A SourceContext referring to a Gerrit project.
	Gerrit           *GerritSourceContext `protobuf:"bytes,3,opt,name=gerrit" json:"gerrit,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *SourceContext) Reset()         { *m = SourceContext{} }
func (m *SourceContext) String() string { return proto.CompactTextString(m) }
func (*SourceContext) ProtoMessage()    {}

func (m *SourceContext) GetCloudRepo() *CloudRepoSourceContext {
	if m != nil {
		return m.CloudRepo
	}
	return nil
}

func (m *SourceContext) GetCloudWorkspace() *CloudWorkspaceSourceContext {
	if m != nil {
		return m.CloudWorkspace
	}
	return nil
}

func (m *SourceContext) GetGerrit() *GerritSourceContext {
	if m != nil {
		return m.Gerrit
	}
	return nil
}

// Selects a repo using a Google Cloud Platform project ID
// (e.g. winged-cargo-31) and a repo name within that project.
type ProjectRepoId struct {
	// The ID of the project.
	ProjectId *string `protobuf:"bytes,1,opt,name=project_id" json:"project_id,omitempty"`
	// The name of the repo. Leave empty for the default repo.
	RepoName         *string `protobuf:"bytes,2,opt,name=repo_name" json:"repo_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ProjectRepoId) Reset()         { *m = ProjectRepoId{} }
func (m *ProjectRepoId) String() string { return proto.CompactTextString(m) }
func (*ProjectRepoId) ProtoMessage()    {}

func (m *ProjectRepoId) GetProjectId() string {
	if m != nil && m.ProjectId != nil {
		return *m.ProjectId
	}
	return ""
}

func (m *ProjectRepoId) GetRepoName() string {
	if m != nil && m.RepoName != nil {
		return *m.RepoName
	}
	return ""
}

// A unique identifier for a cloud repo.
// A cloud repository can be identified by either its project ID and
// repository name combination, or its globally unique identifier.
type RepoId struct {
	// A combination of a project ID and a repo name.
	ProjectRepoId *ProjectRepoId `protobuf:"bytes,1,opt,name=project_repo_id" json:"project_repo_id,omitempty"`
	// A server-assigned, globally unique identifier.
	Uid              *string `protobuf:"bytes,2,opt,name=uid" json:"uid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *RepoId) Reset()         { *m = RepoId{} }
func (m *RepoId) String() string { return proto.CompactTextString(m) }
func (*RepoId) ProtoMessage()    {}

func (m *RepoId) GetProjectRepoId() *ProjectRepoId {
	if m != nil {
		return m.ProjectRepoId
	}
	return nil
}

func (m *RepoId) GetUid() string {
	if m != nil && m.Uid != nil {
		return *m.Uid
	}
	return ""
}

// A CloudRepoSourceContext denotes a particular revision in a cloud
// repo (a repo hosted by the Google Cloud Platform).
// The revision can be specified by revision id (hash) or alias name.
// (An alias is a branch, tag or Mercurial bookmark.)
type CloudRepoSourceContext struct {
	RepoId           *RepoId `protobuf:"bytes,1,opt,name=repo_id" json:"repo_id,omitempty"`
	RevisionId       *string `protobuf:"bytes,2,opt,name=revision_id" json:"revision_id,omitempty"`
	AliasName        *string `protobuf:"bytes,3,opt,name=alias_name" json:"alias_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CloudRepoSourceContext) Reset()         { *m = CloudRepoSourceContext{} }
func (m *CloudRepoSourceContext) String() string { return proto.CompactTextString(m) }
func (*CloudRepoSourceContext) ProtoMessage()    {}

func (m *CloudRepoSourceContext) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *CloudRepoSourceContext) GetRevisionId() string {
	if m != nil && m.RevisionId != nil {
		return *m.RevisionId
	}
	return ""
}

func (m *CloudRepoSourceContext) GetAliasName() string {
	if m != nil && m.AliasName != nil {
		return *m.AliasName
	}
	return ""
}

// A CloudWorkspaceId is a unique identifier for a cloud workspace.
// A cloud workspace is a place associated with a repo where modified files
// can be stored before they are committed.
type CloudWorkspaceId struct {
	// The ID of the repo containing the workspace.
	RepoId *RepoId `protobuf:"bytes,1,opt,name=repo_id" json:"repo_id,omitempty"`
	// The unique name of the workspace within the repo.  This is the name
	// chosen by the client in the Source API's CreateWorkspace method.
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CloudWorkspaceId) Reset()         { *m = CloudWorkspaceId{} }
func (m *CloudWorkspaceId) String() string { return proto.CompactTextString(m) }
func (*CloudWorkspaceId) ProtoMessage()    {}

func (m *CloudWorkspaceId) GetRepoId() *RepoId {
	if m != nil {
		return m.RepoId
	}
	return nil
}

func (m *CloudWorkspaceId) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

// A CloudWorkspaceSourceContext denotes a workspace at a particular snapshot.
type CloudWorkspaceSourceContext struct {
	// The ID of the workspace.
	WorkspaceId *CloudWorkspaceId `protobuf:"bytes,1,opt,name=workspace_id" json:"workspace_id,omitempty"`
	// The ID of the snapshot.
	// An empty snapshot_id refers to the most recent snapshot.
	SnapshotId       *string `protobuf:"bytes,2,opt,name=snapshot_id" json:"snapshot_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CloudWorkspaceSourceContext) Reset()         { *m = CloudWorkspaceSourceContext{} }
func (m *CloudWorkspaceSourceContext) String() string { return proto.CompactTextString(m) }
func (*CloudWorkspaceSourceContext) ProtoMessage()    {}

func (m *CloudWorkspaceSourceContext) GetWorkspaceId() *CloudWorkspaceId {
	if m != nil {
		return m.WorkspaceId
	}
	return nil
}

func (m *CloudWorkspaceSourceContext) GetSnapshotId() string {
	if m != nil && m.SnapshotId != nil {
		return *m.SnapshotId
	}
	return ""
}

// A SourceContext referring to a Gerrit project.
type GerritSourceContext struct {
	// The URI of a running Gerrit instance.
	HostUri *string `protobuf:"bytes,1,opt,name=host_uri" json:"host_uri,omitempty"`
	// The full project name within the host. Projects may be nested, so
	// "project/subproject" is a valid project name.
	// The "repo name" is hostURI/project.
	GerritProject *string `protobuf:"bytes,2,opt,name=gerrit_project" json:"gerrit_project,omitempty"`
	// A revision in a Gerrit project can be identified by either its revision ID
	// or its alias name.
	// A revision (commit) ID.
	RevisionId *string `protobuf:"bytes,3,opt,name=revision_id" json:"revision_id,omitempty"`
	// The name of an alias (branch, tag, etc.).
	AliasName        *string `protobuf:"bytes,4,opt,name=alias_name" json:"alias_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GerritSourceContext) Reset()         { *m = GerritSourceContext{} }
func (m *GerritSourceContext) String() string { return proto.CompactTextString(m) }
func (*GerritSourceContext) ProtoMessage()    {}

func (m *GerritSourceContext) GetHostUri() string {
	if m != nil && m.HostUri != nil {
		return *m.HostUri
	}
	return ""
}

func (m *GerritSourceContext) GetGerritProject() string {
	if m != nil && m.GerritProject != nil {
		return *m.GerritProject
	}
	return ""
}

func (m *GerritSourceContext) GetRevisionId() string {
	if m != nil && m.RevisionId != nil {
		return *m.RevisionId
	}
	return ""
}

func (m *GerritSourceContext) GetAliasName() string {
	if m != nil && m.AliasName != nil {
		return *m.AliasName
	}
	return ""
}

func init() {
}
