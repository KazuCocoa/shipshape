// Code generated by protoc-gen-go.
// source: shipshape/proto/shipshape_context.proto
// DO NOT EDIT!

/*
Package shipshape_context_proto_go_src is a generated protocol buffer package.

It is generated from these files:
	shipshape/proto/shipshape_context.proto

It has these top-level messages:
	ShipshapeContext
	ChangelistDetails
	CompilationDetails
*/
package shipshape_context_proto_go_src

import proto "github.com/golang/protobuf/proto"
import math "math"
import source_v1 "github.com/google/shipshape/shipshape/proto/source_context_proto"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

// Indicates what stage of Shipshape to plug in to or Shipshape is running in.
type Stage int32

const (
	// optionally set: changelist_details.
	Stage_PRE_BUILD Stage = 1
	// guaranteed to be set: compilation_unit.
	// optionally set: changelist_details.
	Stage_POST_BUILD Stage = 2
)

var Stage_name = map[int32]string{
	1: "PRE_BUILD",
	2: "POST_BUILD",
}
var Stage_value = map[string]int32{
	"PRE_BUILD":  1,
	"POST_BUILD": 2,
}

func (x Stage) Enum() *Stage {
	p := new(Stage)
	*p = x
	return p
}
func (x Stage) String() string {
	return proto.EnumName(Stage_name, int32(x))
}
func (x *Stage) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Stage_value, data, "Stage")
	if err != nil {
		return err
	}
	*x = Stage(value)
	return nil
}

type ShipshapeContext_Environment int32

const (
	ShipshapeContext_CODE_REVIEW  ShipshapeContext_Environment = 1
	ShipshapeContext_LOCAL_CLIENT ShipshapeContext_Environment = 2
	ShipshapeContext_BATCH        ShipshapeContext_Environment = 3
	ShipshapeContext_IDE          ShipshapeContext_Environment = 4
	ShipshapeContext_POST_SUBMIT  ShipshapeContext_Environment = 5
)

var ShipshapeContext_Environment_name = map[int32]string{
	1: "CODE_REVIEW",
	2: "LOCAL_CLIENT",
	3: "BATCH",
	4: "IDE",
	5: "POST_SUBMIT",
}
var ShipshapeContext_Environment_value = map[string]int32{
	"CODE_REVIEW":  1,
	"LOCAL_CLIENT": 2,
	"BATCH":        3,
	"IDE":          4,
	"POST_SUBMIT":  5,
}

func (x ShipshapeContext_Environment) Enum() *ShipshapeContext_Environment {
	p := new(ShipshapeContext_Environment)
	*p = x
	return p
}
func (x ShipshapeContext_Environment) String() string {
	return proto.EnumName(ShipshapeContext_Environment_name, int32(x))
}
func (x *ShipshapeContext_Environment) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ShipshapeContext_Environment_value, data, "ShipshapeContext_Environment")
	if err != nil {
		return err
	}
	*x = ShipshapeContext_Environment(value)
	return nil
}

// Root object that provides access to information
// about the environment the analysis is running in.
type ShipshapeContext struct {
	// Where is the analysis running, used to make decisions to tweak
	// the analysis.
	Environment *ShipshapeContext_Environment `protobuf:"varint,1,opt,name=environment,enum=shipshape_proto.ShipshapeContext_Environment" json:"environment,omitempty"`
	// The source_context describes the source code repository analyzed.
	SourceContext *source_v1.SourceContext `protobuf:"bytes,2,opt,name=source_context" json:"source_context,omitempty"`
	// Current list of file patterns to analyze, from repo root
	FilePath []string `protobuf:"bytes,3,rep,name=file_path" json:"file_path,omitempty"`
	// Path to the repo_root locally. All files can be read from in this
	// directory. If no file_paths are specified, will analyze all files
	// available from the root.
	RepoRoot *string `protobuf:"bytes,4,opt,name=repo_root" json:"repo_root,omitempty"`
	// Set only when analysis is run in the context of a changelist.
	// e.g.  a Code Review
	ChangelistDetails *ChangelistDetails `protobuf:"bytes,5,opt,name=changelist_details" json:"changelist_details,omitempty"`
	// TODO(supertri): Do we need dependency details, or build details?
	CompilationDetails *CompilationDetails `protobuf:"bytes,8,opt,name=compilation_details" json:"compilation_details,omitempty"`
	XXX_unrecognized   []byte              `json:"-"`
}

func (m *ShipshapeContext) Reset()         { *m = ShipshapeContext{} }
func (m *ShipshapeContext) String() string { return proto.CompactTextString(m) }
func (*ShipshapeContext) ProtoMessage()    {}

func (m *ShipshapeContext) GetEnvironment() ShipshapeContext_Environment {
	if m != nil && m.Environment != nil {
		return *m.Environment
	}
	return ShipshapeContext_CODE_REVIEW
}

func (m *ShipshapeContext) GetSourceContext() *source_v1.SourceContext {
	if m != nil {
		return m.SourceContext
	}
	return nil
}

func (m *ShipshapeContext) GetFilePath() []string {
	if m != nil {
		return m.FilePath
	}
	return nil
}

func (m *ShipshapeContext) GetRepoRoot() string {
	if m != nil && m.RepoRoot != nil {
		return *m.RepoRoot
	}
	return ""
}

func (m *ShipshapeContext) GetChangelistDetails() *ChangelistDetails {
	if m != nil {
		return m.ChangelistDetails
	}
	return nil
}

func (m *ShipshapeContext) GetCompilationDetails() *CompilationDetails {
	if m != nil {
		return m.CompilationDetails
	}
	return nil
}

// Provides data describing a changelist, including code review related
// information.
type ChangelistDetails struct {
	// Commit or changelist id.
	Changelist            *string  `protobuf:"bytes,1,opt,name=changelist" json:"changelist,omitempty"`
	ChangelistAuthor      *string  `protobuf:"bytes,2,opt,name=changelist_author" json:"changelist_author,omitempty"`
	ChangelistReviewer    []string `protobuf:"bytes,3,rep,name=changelist_reviewer" json:"changelist_reviewer,omitempty"`
	ChangelistCc          []string `protobuf:"bytes,4,rep,name=changelist_cc" json:"changelist_cc,omitempty"`
	ChangelistDescription *string  `protobuf:"bytes,5,opt,name=changelist_description" json:"changelist_description,omitempty"`
	// List of files that are deleted in the changelist.
	DeletedFilePath  []string `protobuf:"bytes,6,rep,name=deleted_file_path" json:"deleted_file_path,omitempty"`
	ClientName       *string  `protobuf:"bytes,7,opt,name=client_name" json:"client_name,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ChangelistDetails) Reset()         { *m = ChangelistDetails{} }
func (m *ChangelistDetails) String() string { return proto.CompactTextString(m) }
func (*ChangelistDetails) ProtoMessage()    {}

func (m *ChangelistDetails) GetChangelist() string {
	if m != nil && m.Changelist != nil {
		return *m.Changelist
	}
	return ""
}

func (m *ChangelistDetails) GetChangelistAuthor() string {
	if m != nil && m.ChangelistAuthor != nil {
		return *m.ChangelistAuthor
	}
	return ""
}

func (m *ChangelistDetails) GetChangelistReviewer() []string {
	if m != nil {
		return m.ChangelistReviewer
	}
	return nil
}

func (m *ChangelistDetails) GetChangelistCc() []string {
	if m != nil {
		return m.ChangelistCc
	}
	return nil
}

func (m *ChangelistDetails) GetChangelistDescription() string {
	if m != nil && m.ChangelistDescription != nil {
		return *m.ChangelistDescription
	}
	return ""
}

func (m *ChangelistDetails) GetDeletedFilePath() []string {
	if m != nil {
		return m.DeletedFilePath
	}
	return nil
}

func (m *ChangelistDetails) GetClientName() string {
	if m != nil && m.ClientName != nil {
		return *m.ClientName
	}
	return ""
}

// Provides information about a specific compilation
type CompilationDetails struct {
	// Set when running compiler based analysis; compilation_details describes
	// a single invocation of a compiler.
	// optional kythe.proto.CompilationUnit compilation_unit = 1;
	// The local path to a compilation description file (.kindex)
	// that this compilation unit came from.
	CompilationDescriptionPath *string `protobuf:"bytes,2,opt,name=compilation_description_path" json:"compilation_description_path,omitempty"`
	XXX_unrecognized           []byte  `json:"-"`
}

func (m *CompilationDetails) Reset()         { *m = CompilationDetails{} }
func (m *CompilationDetails) String() string { return proto.CompactTextString(m) }
func (*CompilationDetails) ProtoMessage()    {}

func (m *CompilationDetails) GetCompilationDescriptionPath() string {
	if m != nil && m.CompilationDescriptionPath != nil {
		return *m.CompilationDescriptionPath
	}
	return ""
}

func init() {
	proto.RegisterEnum("shipshape_proto.Stage", Stage_name, Stage_value)
	proto.RegisterEnum("shipshape_proto.ShipshapeContext_Environment", ShipshapeContext_Environment_name, ShipshapeContext_Environment_value)
}
