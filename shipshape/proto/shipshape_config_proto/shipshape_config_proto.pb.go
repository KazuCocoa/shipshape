// Code generated by protoc-gen-go.
// source: shipshape/proto/shipshape_config.proto
// DO NOT EDIT!

/*
Package shipshape_config_proto_go_src is a generated protocol buffer package.

It is generated from these files:
	shipshape/proto/shipshape_config.proto

It has these top-level messages:
	GlobalConfig
	EventConfig
	ShipshapeConfig
*/
package shipshape_config_proto_go_src

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type GlobalConfig struct {
	// URLs to third-party analyzers to be installed.
	// The URLs must point to a Docker image that can be downloaded and run.
	// The container must respond to the Shipshape RPC API on port 10005;
	// Shipshape will map this to a different external port.
	// For example,
	// gcr.io/shipshape_releases/android_lint:prod
	Images []string `protobuf:"bytes,1,rep,name=images" json:"images,omitempty"`
	// A list of subtrees to ignore when running analysis. Each entry in the list
	// is a directory, relative to the repository root.
	// TODO(collinwinter): add support for file=.gitignore syntax to avoid
	// duplication between multiple systems.
	Ignore           []string `protobuf:"bytes,2,rep,name=ignore" json:"ignore,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *GlobalConfig) Reset()         { *m = GlobalConfig{} }
func (m *GlobalConfig) String() string { return proto.CompactTextString(m) }
func (*GlobalConfig) ProtoMessage()    {}

func (m *GlobalConfig) GetImages() []string {
	if m != nil {
		return m.Images
	}
	return nil
}

func (m *GlobalConfig) GetIgnore() []string {
	if m != nil {
		return m.Ignore
	}
	return nil
}

type EventConfig struct {
	// Defines points in a development workflow when one may want to run analyses
	// Pre-defined values used by Leeroy might include "Commit", "Review", and "Deploy".
	// A CLI might use "Developer". Jenkins without Leeroy might use all sorts of
	// events with job names like "Jenkins-Nightly", "Jenkins-QAGate", etc.
	// The special event "All" signals that this configuration applies to EVERY run of
	// Shipshape. If "All" is used, no other event can be used.
	// TODO(collinwinter): scrub internal Google codenames from this comment.
	Event *string `protobuf:"bytes,1,opt,name=event" json:"event,omitempty"`
	// A list of categories to run for this event. Each category must be found in
	// the default collection of analyzers, or in one of the analyzers listed in
	// the `images` list of the global section.
	Categories       []string `protobuf:"bytes,2,rep,name=categories" json:"categories,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *EventConfig) Reset()         { *m = EventConfig{} }
func (m *EventConfig) String() string { return proto.CompactTextString(m) }
func (*EventConfig) ProtoMessage()    {}

func (m *EventConfig) GetEvent() string {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return ""
}

func (m *EventConfig) GetCategories() []string {
	if m != nil {
		return m.Categories
	}
	return nil
}

// Represents the Shipshape configuration.
type ShipshapeConfig struct {
	Global           *GlobalConfig  `protobuf:"bytes,1,opt,name=global" json:"global,omitempty"`
	Events           []*EventConfig `protobuf:"bytes,2,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *ShipshapeConfig) Reset()         { *m = ShipshapeConfig{} }
func (m *ShipshapeConfig) String() string { return proto.CompactTextString(m) }
func (*ShipshapeConfig) ProtoMessage()    {}

func (m *ShipshapeConfig) GetGlobal() *GlobalConfig {
	if m != nil {
		return m.Global
	}
	return nil
}

func (m *ShipshapeConfig) GetEvents() []*EventConfig {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
}
