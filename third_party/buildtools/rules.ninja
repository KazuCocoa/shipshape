ninja_required_version = 1.5

rule touch
  command = touch -a $out
  description = touch $out
  restat = 1

rule check_version
  command = $tool $args >$out 2>&1; grep -Pq '$regexp' $out || { echo 'Invalid $tool version.  Minimum required version: $minversion (use --skip_version_checks to ignore)'; exit 1; }
  description = check_version $tool

rule run_test
  command = bash -c "set -o pipefail; $in $args 2>&1 | tee $log && $
                     touch $out || { code=\$$?; echo Test failure code: \$$code; exit \$$code; }"
  description = test $in $args

rule javac
  command = mkdir -p $out.classes && $
            '$javac' $javacopts -cp '$classpath' $in -d $out.classes && $
            '$javajar' cf $out -C $out.classes .
  description = javac $owner

rule java_shell
  command = echo 'exec "$java" -cp "$classpath" "$main" $args "$$@"' > $out && $
            chmod +x $out
  description = java_shell $main

rule java_deploy_jar
  command = root=$$PWD; $
            mkdir -p $out.classes && $
            cd $out.classes && $
            for i in $in; do $
              '$javajar' xf $$root/$$i; $
            done && $
            echo 'Main-Class: $main' > manifest.txt && $
            '$javajar' cfm deploy.jar manifest.txt . && $
            mv deploy.jar $$root/$out
  description = java_deploy_jar $out

rule go_build
  command = CC=$cpath GOPATH="$$PWD/$root" CGO_CFLAGS="$cflags" CGO_LDFLAGS="$ldflags" $gotool build -o $out $package
  description = go_build $owner

rule go_compile
  command = $gotool tool 6g -p $package -complete -pack -o $out $include $in
  description = go_compile $owner

rule go_linker
  command = $gotool tool 6l $include --extldflags='$extldflags' -o $out $in
  description = go_linker $out

rule go_testmain
  command = $generator $package $out $in
  description = go_testmain $package

rule c_compile
  command = $cpath -c $in -o $out $copts
  description = c_compile $in

rule cpp_compile
  command = $cxxpath -c $in -o $out $copts
  description = cpp_compile $in

rule archive
  command = ar cr $out $in
  description = archive $out

rule linker
  command = $cxxpath -o $out -pthread $in $in $flags
  description = linker $out

rule protoc_java
  command = mkdir -p $out.srcs $out.classes && $
            $protocpath --java_out=$out.srcs $in && $
            $javac $javacopts -cp $classpath -d $out.classes $$(find $out.srcs -name '*.java') && $
            $javajar cf $out -C $out.classes .
  description = protoc_java $owner

rule protoc_go
  command = rm -rf $outdir && $
            mkdir -p $outdir && $
            $protocpath --plugin=$protocgengo --go_out=import_path=$package$importpath:$outdir $in && $
            find $outdir -type f -name '*.go' -exec mv -f {} $outdir ';' && $
            $gotool tool 6g -p $package -complete -pack -o $out $include $$(ls -1 $outdir/*.go)
  description = protoc_go $owner

rule protoc_cpp
  command = mkdir -p $outdir && $
            $protocpath --cpp_out=$outdir $in && $
            for i in $$(find $outdir -name '*.cc'); do $
              $cxxpath -c -I $outdir $include $$i -o $$i.o; $
            done && $
            ar cr $out $$(find $outdir -name '*.o')
  description = protoc_cpp $owner

rule docker_build
  command = mkdir -p $outdir && $
            cp -Lr --preserve=all $in $outdir && $
            docker build -t $name $outdir && $
            touch $out
  description = docker_build $name
  pool = console

rule docker_pull
  command = docker pull $remote && $
            docker tag -f $remote $local && $
            touch $out
  description = docker_pull $remote $local
  pool = console

rule docker_push
  command = docker tag -f $local $remote && $
            docker push $remote && $
            touch $out
  description = docker_push $local $remote
  pool = console

rule kythe_extractor
  command = bash -c "tmp=\$$(mktemp -d) && $
                     trap \"rm -rf '\$$tmp'\" ERR EXIT INT && $
                     KYTHE_VNAMES=$vnames KYTHE_OUTPUT_DIRECTORY=\$$tmp KYTHE_ROOT_DIRECTORY=\$$PWD $in $args && $
                     mv \"\$$tmp\"/*.kindex $out"
  description = kythe_extractor $out

rule kythe_analyzer
  command = $analyzer $args $in > $out
  description = kythe_analyzer $out

rule kythe_verifier
  command = bash -c 'set -o pipefail; $
                     cat $entries | $verifier --ignore_dups $in 2>&1 | tee $log && $
                     touch $out || { code=$$?; echo "Test failure code: $$code"; exit $$code; }'
  description = kythe_verifier $owner

rule asciidoc
  command = bash -c "set -o pipefail; $asciidoc $args --backend=$backend -o $out $in 2>&1 | $
                     awk '/filter non-zero exit code/ {code=1} // {print} END {exit code}'"
  description = asciidoc $in

rule genlex
  command = $flex -o $out $in
  description = flex $in

rule genyacc
  command = $bison $$($bison --version | grep -qE '^bison .* 3\..*' && echo -Wno-deprecated) -o $main_out $in
  description = bison $in
